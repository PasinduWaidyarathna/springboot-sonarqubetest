name: Spring Boot CICD pipeline with ECR and EC2
run-name: Spring Boot CICD pipeline with ECR and EC2

on:
  #  push:
  #    branches:
  #      - main
  workflow_dispatch:

# Environment variables used throughout the workflow
env:
  SSH_USER: ${{secrets.SSH_USER}}
  SSH_HOST: ${{secrets.SSH_HOST}}
  SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{secrets.AWS_REGION}}
  ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  # First job: Build and run tests to ensure code quality
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build and Test
        run: mvn clean test

  # Second job: Build Docker image and push to Amazon ECR
  ecr:
    needs: test
    name: Build and Push Image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.AWS_REGION}}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.ECR_REPOSITORY_URI }}:latest

  # Third job: Deploy the Docker container to EC2 from ECR
  ec2:
    needs: ecr
    name: Deploy Docker Container to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Install and Start Docker on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
                sudo apt-get update
                sudo apt-get install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
            else
                echo "Docker is already installed."
            fi

      - name: Install AWS CLI on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y snapd
            if ! command -v aws &> /dev/null; then
                sudo snap install aws-cli --classic
            else
                echo "AWS CLI is already installed."
            fi
            aws --version

      - name: Configure AWS Credentials on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Pull and Run Docker Image on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            sudo docker stop spring-boot-backend || true
            sudo docker rm spring-boot-backend || true
            sudo docker rmi -f ${{ env.ECR_REPOSITORY_URI }}:latest || true
            sudo docker pull ${{ env.ECR_REPOSITORY_URI }}:latest
            sudo docker run --name spring-boot-backend -d -p 8080:8080 \
                          ${{ env.ECR_REPOSITORY_URI }}:latest